The ``1-my_list`` module
======================

Using ``MyList``
-------------------

First import ``MyList`` from the ``1-my_list`` module:

    >>> MyList = __import__('1-my_list').MyList

Now use it:

    >>> issubclass(MyList, list)
    True

    >>> 'print_sorted' in dir(MyList)
    True

    >>> MyList([1, 3, 4, 2, 5]).print_sorted()
    [1, 2, 3, 4, 5]

    >>> MyList(["c", "d", "a", "e", "b"]).print_sorted()
    ['a', 'b', 'c', 'd', 'e']

    >>> MyList([1.1, 3.3, 4.4, 2.2, 5.5]).print_sorted()
    [1.1, 2.2, 3.3, 4.4, 5.5]

    >>> MyList([-1, -3, -4, -2, -5]).print_sorted()
    [-5, -4, -3, -2, -1]

    >>> MyList([1]).print_sorted()
    [1]

    >>> MyList(1).print_sorted()
    Traceback (most recent call last):
    ...
    TypeError: 'int' object is not iterable

    >>> MyList([1, "a"]).print_sorted()
    Traceback (most recent call last):
    ...
    TypeError: unorderable types: str() < int()


    >>> MyList().print_sorted()
    []

    >>> MyList([]).print_sorted()
    []

    >>> l = MyList([1, 3, 4, 2, 0])
    >>> l.print_sorted()
    [0, 1, 2, 3, 4]
    >>> print(l)
    [1, 3, 4, 2, 0]
    >>> type(l)
    <class '1-my_list.MyList'>
    >>> l.print_sorted([1, 2, 3])
    Traceback (most recent call last):
    ...
    TypeError: print_sorted() takes 1 positional argument but 2 were given

    >>> my_list = MyList([1, 2, 4, 3, 5])
    >>> print(my_list)
    [1, 2, 4, 3, 5]
    >>> my_list.append(98)
    >>> my_list.print_sorted()
    [1, 2, 3, 4, 5, 98]
    >>> print(my_list)
    [1, 2, 4, 3, 5, 98]

    >>> my_list = MyList([-1, 2, 4, -3, 5])
    >>> my_list.print_sorted()
    [-3, -1, 2, 4, 5]
