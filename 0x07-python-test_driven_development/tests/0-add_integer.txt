The ``0-add_integer`` module
======================

Using ``add_integer``
-------------------

First import ``add_integer`` from the ``0-add_integer`` module:

    >>> add_integer = __import__('0-add_integer').add_integer

Now use it:

    >>> add_integer(1, 1)
    2

    >>> add_integer(2)
    100

    >>> add_integer(2.7)
    100

    >>> add_integer(2.999999999999999)
    100

    >>> add_integer(1 + 2, 2 + 1)
    6

    >>> add_integer(3.1 - 1.2)
    99

    >>> add_integer(1, None)
    Traceback (most recent call last):
    ...
    TypeError: b must be an integer

    >>> add_integer()
    Traceback (most recent call last):
    ...
    TypeError: add_integer() missing 1 required positional argument: 'a'

    >>> add_integer(1, 1, 1)
    Traceback (most recent call last):
    ...
    TypeError: add_integer() takes from 1 to 2 positional arguments but 3 were given

    >>> add_integer("yo", 1)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

    >>> add_integer(1, "yo")
    Traceback (most recent call last):
    ...
    TypeError: b must be an integer

    >>> add_integer("yo", "yo")
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

    >>> add_integer(float("inf"))
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

    >>> add_integer(float("-inf"))
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

    >>> add_integer(float("nan"))
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

    >>> add_integer(1, float("inf"))
    Traceback (most recent call last):
    ...
    TypeError: b must be an integer

    >>> add_integer(1, float("-inf"))
    Traceback (most recent call last):
    ...
    TypeError: b must be an integer

    >>> add_integer(1, float("nan"))
    Traceback (most recent call last):
    ...
    TypeError: b must be an integer
